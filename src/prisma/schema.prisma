// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  // NextAuth
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Backend
  passwordHash    String?
  admin           Boolean   @default(false)
  createdAt       DateTime  @default(now())
  firstSubscribed DateTime?
  subEnds         DateTime?
  stripeId        String?
  stripeSubId     String?

  // Profile
  score          Float?
  firstName      String?
  lastName       String?
  dob            DateTime?
  gender         String?
  profilePicture String?

  // Relations
  gradedExams      GradedExam[]
  examSession      ExamSession?
  gradedCategories GradedCategory[]
}

model Exam {
  id           String        @id @default(uuid())
  num          Int           @unique
  createdAt    DateTime      @default(now())
  problems     Problem[]
  gradedExams  GradedExam[]
  examSessions ExamSession[]
}

model Problem {
  id            String          @id @default(uuid())
  question      String
  multi         Boolean         @default(false)
  correct       String
  options       String[]
  unit          String?
  num           Int
  img           String?
  createdAt     DateTime        @default(now())
  exam          Exam            @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId        String
  categories    Category[]
  gradedProblem GradedProblem[]
}

model GradedExam {
  id             String          @id @default(uuid())
  num            Int
  marks          Int
  totalMarks     Int
  percent        Float
  firstAttempt   Boolean
  time           Int
  createdAt      DateTime        @default(now())
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  exam           Exam            @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId         String
  gradedProblems GradedProblem[]
}

model GradedProblem {
  id           String     @id @default(uuid())
  num          Int
  question     String
  multi        Boolean
  correct      String
  selected     String?
  options      String[]
  unit         String?
  img          String?
  createdAt    DateTime   @default(now())
  categories   Category[]
  gradedExam   GradedExam @relation(fields: [gradedExamId], references: [id], onDelete: Cascade)
  gradedExamId String
  problem      Problem    @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId    String
}

model ExamSession {
  id           String   @id @default(uuid())
  firstAttempt Boolean
  start        DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  Exam         Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId       String
}

model GradedCategory {
  id       String   @id @default(uuid())
  correct  Int      @default(0)
  attempts Int      @default(0)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  category Category

  @@unique([userId, category])
}

enum Category {
  NUMBERS
  ADDITION_SUBTRACTION
  MULTIPLICATION_DIVISION
  FRACTIONS
  MEASUREMENT
  GEOMETRY
  STATISTICS
  RATIO_PROPORTION
  ALGEBRA
}

// NextAuth

model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
